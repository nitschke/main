%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.24.5 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 119 119
%%HiResBoundingBox: 0 0 118.371 118.371
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  2 array astore
  /setpagedevice where {
    pop 2 dict begin
      /PageSize exch def
      /ImagingBBox null def
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 118.371 118.371 re
W
q
[1 0 0 1 2.493 59.185] cm
q
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
0.3985 w
q
0.99628 w
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
Q
q
[0.99628 1.99255] 0 d
56.69362 0 m
56.69362 56.69362 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 56.69362 m
0 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 0 m
0 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 56.69362 m
113.38724 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 0 m
113.38724 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 0 m
113.38724 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 0 m
0 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
0 -28.3468 m
0 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
113.38724 28.3468 m
113.38724 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
113.38724 -28.3468 m
56.69362 -56.69362 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 0 m
56.69362 -56.69362 l
S
Q
q
[0.99628 1.99255] 0 d
56.69362 -56.69362 m
0 -28.3468 l
S
Q
75.57259 28.3468 m
37.78607 28.3468 l
18.87897 0 l
37.78607 -28.3468 l
75.57259 -28.3468 l
94.47969 0 l
75.57259 28.3468 l
S
28.3468 42.5202 m
37.78607 28.3468 l
S
0 0 m
18.87897 0 l
S
28.3468 -42.5202 m
37.78607 -28.3468 l
S
85.04042 -42.5202 m
75.57259 -28.3468 l
S
113.38724 0 m
94.47969 0 l
S
85.04042 42.5202 m
75.57259 28.3468 l
S
q
[0.99628 1.99255] 0 d
37.78607 28.3468 m
75.57259 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
18.87897 0 m
94.47969 0 l
S
Q
q
[0.99628 1.99255] 0 d
37.78607 -28.3468 m
75.57259 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
37.78607 28.3468 m
56.69362 56.69362 l
S
Q
q
[0.99628 1.99255] 0 d
18.87897 0 m
0 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
37.78607 -28.3468 m
0 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
75.57259 -28.3468 m
56.69362 -56.69362 l
S
Q
q
[0.99628 1.99255] 0 d
94.47969 0 m
113.38724 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
75.57259 28.3468 m
113.38724 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
37.78607 28.3468 m
0 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
18.87897 0 m
0 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
37.78607 -28.3468 m
56.69362 -56.69362 l
S
Q
q
[0.99628 1.99255] 0 d
75.57259 -28.3468 m
113.38724 -28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
94.47969 0 m
113.38724 28.3468 l
S
Q
q
[0.99628 1.99255] 0 d
75.57259 28.3468 m
56.69362 56.69362 l
S
Q
58.68617 0 m
58.68617 1.10046 57.79408 1.99255 56.69362 1.99255 c
55.59314 1.99255 54.70107 1.10046 54.70107 0 c
54.70107 -1.10046 55.59314 -1.99255 56.69362 -1.99255 c
57.79408 -1.99255 58.68617 -1.10046 58.68617 0 c
h
f
58.68617 56.69362 m
58.68617 57.79408 57.79408 58.68617 56.69362 58.68617 c
55.59314 58.68617 54.70107 57.79408 54.70107 56.69362 c
54.70107 55.59314 55.59314 54.70107 56.69362 54.70107 c
57.79408 54.70107 58.68617 55.59314 58.68617 56.69362 c
h
f
1.99255 28.3468 m
1.99255 29.44728 1.10046 30.33936 0 30.33936 c
-1.10046 30.33936 -1.99255 29.44728 -1.99255 28.3468 c
-1.99255 27.24634 -1.10046 26.35425 0 26.35425 c
1.10046 26.35425 1.99255 27.24634 1.99255 28.3468 c
h
f
115.37979 28.3468 m
115.37979 29.44728 114.4877 30.33936 113.38724 30.33936 c
112.28676 30.33936 111.39468 29.44728 111.39468 28.3468 c
111.39468 27.24634 112.28676 26.35425 113.38724 26.35425 c
114.4877 26.35425 115.37979 27.24634 115.37979 28.3468 c
h
f
115.37979 -28.3468 m
115.37979 -27.24634 114.4877 -26.35425 113.38724 -26.35425 c
112.28676 -26.35425 111.39468 -27.24634 111.39468 -28.3468 c
111.39468 -29.44728 112.28676 -30.33936 113.38724 -30.33936 c
114.4877 -30.33936 115.37979 -29.44728 115.37979 -28.3468 c
h
f
1.99255 -28.3468 m
1.99255 -27.24634 1.10046 -26.35425 0 -26.35425 c
-1.10046 -26.35425 -1.99255 -27.24634 -1.99255 -28.3468 c
-1.99255 -29.44728 -1.10046 -30.33936 0 -30.33936 c
1.10046 -30.33936 1.99255 -29.44728 1.99255 -28.3468 c
h
f
58.68617 -56.69362 m
58.68617 -55.59314 57.79408 -54.70107 56.69362 -54.70107 c
55.59314 -54.70107 54.70107 -55.59314 54.70107 -56.69362 c
54.70107 -57.79408 55.59314 -58.68617 56.69362 -58.68617 c
57.79408 -58.68617 58.68617 -57.79408 58.68617 -56.69362 c
h
f
77.56514 28.3468 m
77.56514 29.44728 76.67305 30.33936 75.57259 30.33936 c
74.4721 30.33936 73.58003 29.44728 73.58003 28.3468 c
73.58003 27.24634 74.4721 26.35425 75.57259 26.35425 c
76.67305 26.35425 77.56514 27.24634 77.56514 28.3468 c
h
f
39.77863 28.3468 m
39.77863 29.44728 38.88655 30.33936 37.78607 30.33936 c
36.68561 30.33936 35.79352 29.44728 35.79352 28.3468 c
35.79352 27.24634 36.68561 26.35425 37.78607 26.35425 c
38.88655 26.35425 39.77863 27.24634 39.77863 28.3468 c
h
f
20.87152 0 m
20.87152 1.10046 19.97943 1.99255 18.87897 1.99255 c
17.77849 1.99255 16.88641 1.10046 16.88641 0 c
16.88641 -1.10046 17.77849 -1.99255 18.87897 -1.99255 c
19.97943 -1.99255 20.87152 -1.10046 20.87152 0 c
h
f
39.77863 -28.3468 m
39.77863 -27.24634 38.88655 -26.35425 37.78607 -26.35425 c
36.68561 -26.35425 35.79352 -27.24634 35.79352 -28.3468 c
35.79352 -29.44728 36.68561 -30.33936 37.78607 -30.33936 c
38.88655 -30.33936 39.77863 -29.44728 39.77863 -28.3468 c
h
f
77.56514 -28.3468 m
77.56514 -27.24634 76.67305 -26.35425 75.57259 -26.35425 c
74.4721 -26.35425 73.58003 -27.24634 73.58003 -28.3468 c
73.58003 -29.44728 74.4721 -30.33936 75.57259 -30.33936 c
76.67305 -30.33936 77.56514 -29.44728 77.56514 -28.3468 c
h
f
96.47224 0 m
96.47224 1.10046 95.58017 1.99255 94.47969 1.99255 c
93.37923 1.99255 92.48714 1.10046 92.48714 0 c
92.48714 -1.10046 93.37923 -1.99255 94.47969 -1.99255 c
95.58017 -1.99255 96.47224 -1.10046 96.47224 0 c
h
f
58.68617 28.3468 m
58.68617 29.44728 57.79408 30.33936 56.69362 30.33936 c
55.59314 30.33936 54.70107 29.44728 54.70107 28.3468 c
54.70107 27.24634 55.59314 26.35425 56.69362 26.35425 c
57.79408 26.35425 58.68617 27.24634 58.68617 28.3468 c
h
f
30.33936 14.17339 m
30.33936 15.27386 29.44728 16.16594 28.3468 16.16594 c
27.24634 16.16594 26.35425 15.27386 26.35425 14.17339 c
26.35425 13.07292 27.24634 12.18083 28.3468 12.18083 c
29.44728 12.18083 30.33936 13.07292 30.33936 14.17339 c
h
f
87.03297 14.17339 m
87.03297 15.27386 86.1409 16.16594 85.04042 16.16594 c
83.93996 16.16594 83.04787 15.27386 83.04787 14.17339 c
83.04787 13.07292 83.93996 12.18083 85.04042 12.18083 c
86.1409 12.18083 87.03297 13.07292 87.03297 14.17339 c
h
f
30.33936 -14.17339 m
30.33936 -13.07292 29.44728 -12.18083 28.3468 -12.18083 c
27.24634 -12.18083 26.35425 -13.07292 26.35425 -14.17339 c
26.35425 -15.27386 27.24634 -16.16594 28.3468 -16.16594 c
29.44728 -16.16594 30.33936 -15.27386 30.33936 -14.17339 c
h
f
87.03297 -14.17339 m
87.03297 -13.07292 86.1409 -12.18083 85.04042 -12.18083 c
83.93996 -12.18083 83.04787 -13.07292 83.04787 -14.17339 c
83.04787 -15.27386 83.93996 -16.16594 85.04042 -16.16594 c
86.1409 -16.16594 87.03297 -15.27386 87.03297 -14.17339 c
h
f
58.68617 -28.3468 m
58.68617 -27.24634 57.79408 -26.35425 56.69362 -26.35425 c
55.59314 -26.35425 54.70107 -27.24634 54.70107 -28.3468 c
54.70107 -29.44728 55.59314 -30.33936 56.69362 -30.33936 c
57.79408 -30.33936 58.68617 -29.44728 58.68617 -28.3468 c
h
f
30.33936 42.5202 m
30.33936 43.62067 29.44728 44.51276 28.3468 44.51276 c
27.24634 44.51276 26.35425 43.62067 26.35425 42.5202 c
26.35425 41.41972 27.24634 40.52765 28.3468 40.52765 c
29.44728 40.52765 30.33936 41.41972 30.33936 42.5202 c
h
f
1.99255 0 m
1.99255 1.10046 1.10046 1.99255 0 1.99255 c
-1.10046 1.99255 -1.99255 1.10046 -1.99255 0 c
-1.99255 -1.10046 -1.10046 -1.99255 0 -1.99255 c
1.10046 -1.99255 1.99255 -1.10046 1.99255 0 c
h
f
30.33936 -42.5202 m
30.33936 -41.41972 29.44728 -40.52765 28.3468 -40.52765 c
27.24634 -40.52765 26.35425 -41.41972 26.35425 -42.5202 c
26.35425 -43.62067 27.24634 -44.51276 28.3468 -44.51276 c
29.44728 -44.51276 30.33936 -43.62067 30.33936 -42.5202 c
h
f
87.03297 -42.5202 m
87.03297 -41.41972 86.1409 -40.52765 85.04042 -40.52765 c
83.93996 -40.52765 83.04787 -41.41972 83.04787 -42.5202 c
83.04787 -43.62067 83.93996 -44.51276 85.04042 -44.51276 c
86.1409 -44.51276 87.03297 -43.62067 87.03297 -42.5202 c
h
f
115.37979 0 m
115.37979 1.10046 114.4877 1.99255 113.38724 1.99255 c
112.28676 1.99255 111.39468 1.10046 111.39468 0 c
111.39468 -1.10046 112.28676 -1.99255 113.38724 -1.99255 c
114.4877 -1.99255 115.37979 -1.10046 115.37979 0 c
h
f
87.03297 42.5202 m
87.03297 43.62067 86.1409 44.51276 85.04042 44.51276 c
83.93996 44.51276 83.04787 43.62067 83.04787 42.5202 c
83.04787 41.41972 83.93996 40.52765 85.04042 40.52765 c
86.1409 40.52765 87.03297 41.41972 87.03297 42.5202 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
